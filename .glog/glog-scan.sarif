{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-49b0253f-86f6-446e-8223-03369da70d4f",
              "help": {
                "text": "",
                "markdown": "### Detected Issue with C Function: `memcpy`\n\nThe `memcpy` function in C/C++ is used to copy a block of memory from one location to another. The vulnerability arises when the size of the source buffer (`src_step`) is larger than the destination buffer (`dst`), leading to a buffer overflow. This can result in undefined behavior, including data corruption, crashes, and security vulnerabilities such as arbitrary code execution.\n\n### General Mitigation Advice\n\n1. **Bounds Checking**: Always ensure that the destination buffer is large enough to hold the data being copied. Use safer alternatives like `memmove` or `strncpy` when possible.\n2. **Input Validation**: Validate all inputs to ensure they are within expected ranges and sizes.\n3. **Use Safer Functions**: Consider using safer functions provided by libraries or language extensions that perform automatic bounds checking.\n4. **Static Analysis**: Use static analysis tools to detect potential buffer overflows in your code.\n\n### Source Code Fix Recommendation\n\n```cpp\n#include <cstring> // Required for memcpy\n#include <iostream>\n\nvoid safe_memcpy(char* dst, size_t dst_size, const char* src, size_t src_step) {\n    if (src_step > dst_size) {\n        std::cerr << \"Error: Source size is larger than destination buffer.\" << std::endl;\n        return;\n    }\n    memcpy(dst, src, src_step);\n}\n\nint main() {\n    const size_t dst_size = 10;\n    char dst[dst_size];\n    const char* src = \"Hello\";\n    size_t src_step = strlen(src) + 1; // +1 for null terminator\n\n    safe_memcpy(dst, dst_size, src, src_step);\n\n    std::cout << \"Copied string: \" << dst << std::endl;\n    return 0;\n}\n```\n\n### Library Dependencies\n\n- `<cstring>`: Required for `memcpy`.\n- `<iostream>`: Required for input/output operations.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-49b0253f-86f6-446e-8223-03369da70d4f",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cpp/vaapi_helper/vaapi_overlay.cpp"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 8,
                  "endLine": 115,
                  "endColumn": 34,
                  "charOffset": 4511,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(dst, src, src_step)",
                    "rendered": {
                      "text": "memcpy(dst, src, src_step)",
                      "markdown": "`memcpy(dst, src, src_step)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cpp/vaapi_helper/vaapi_overlay.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4511,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  src_step)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}